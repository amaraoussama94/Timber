# === GitHub Actions Workflow: Unified Build, Tag, and Release for Timber ===
# This workflow automates the entire CI/CD process for the Timber project:
# 1. Builds the project on both Linux and Windows.
# 2. Extracts the SFML version from the submodule.
# 3. Generates and pushes a new tag in the format Timber_SFML-<version>_<number>.
# 4. Creates a GitHub Release with the compiled binaries.
#
#  Linux Job:
# - Uses Ubuntu as the build environment.
# - Installs development libraries required by SFML (OpenGL, X11, audio, fonts, etc.).
# - Runs `make` to build both SFML and the Timber executable.
# - Uploads the final binary (`bin/Timber`) as an artifact named `Timber-linux`.
#
# ðŸªŸWindows Job:
# - Uses Windows with MSYS2 to provide a Unix-like shell and MinGW toolchain.
# - Installs GCC, Make, and CMake via MSYS2.
# - Runs `make` inside the MSYS2 shell to build SFML and Timber.
# - Uploads the final executable (`bin/Timber.exe`) and all required DLLs as `Timber-windows`.
#
#  Tagging and Release:
# - Extracts the SFML version from `external/SFML/CMakeLists.txt`.
# - Generates the next tag in the format `Timber_SFML-<version>_<number>`.
# - Pushes the tag to GitHub.
# - Creates a GitHub Release with the same name and includes the binaries.
#
# This setup ensures consistent, portable builds across platforms and simplifies distribution.

name: Build, Tag, and Release Timber

on:
  push:
    branches: [main]

jobs:
  # === Linux Build Job ===
  build-linux:
    runs-on: ubuntu-latest
    outputs:
      sfml_version: ${{ steps.sfml.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake g++ make \
            libx11-dev libxrandr-dev libxcursor-dev libxi-dev libxinerama-dev \
            libgl1-mesa-dev libudev-dev libopenal-dev libflac-dev libvorbis-dev libfreetype6-dev

      # === Extract SFML version from submodule CMakeLists.txt ===
      # Temporarily disabled for SFML 2.5.1 compatibility
      # - name: Extract SFML version
      #   id: sfml
      #   run: |
      #     SFML_CMAKE="external/SFML/CMakeLists.txt"
      #     if [[ ! -f "$SFML_CMAKE" ]]; then
      #       echo " SFML CMakeLists.txt not found at $SFML_CMAKE"
      #       exit 1
      #     fi
      #     
      #     VERSION=$(grep -Po '(?<=project\(SFML VERSION )[^)]+(?=\))' "$SFML_CMAKE")
      #     
      #     if [[ -z "$VERSION" ]]; then
      #       echo " Failed to extract SFML version from $SFML_CMAKE"
      #       exit 1
      #     fi
      #     
      #     echo " Detected SFML version: $VERSION"
      #     echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set SFML version manually
        id: sfml
        run: |
          VERSION="2.5.1"
          echo "Using hardcoded SFML version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build project
        run: |
          make clean-all
          make all

      - name: Upload Linux binary
        uses: actions/upload-artifact@v4
        with:
          name: Timber-linux
          path: bin/Timber

  # === Windows Build Job ===
  build-windows:
    runs-on: windows-latest
    needs: build-linux
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Install MSYS2 and dependencies
        uses: msys2/setup-msys2@v2
        with:
          install: >-
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-make
            mingw-w64-x86_64-pkg-config
            mingw-w64-x86_64-freetype
            make

      - name: Build project
        shell: msys2 {0}
        run: |
          export PATH="/mingw64/bin:$PATH"
          make clean-all
          make all

      - name: Stage Windows artifacts
        shell: msys2 {0}
        run: |
          mkdir -p dist
          cp bin/Timber.exe dist/
          cp external/SFML/install/bin/*.dll dist/ || echo "No DLLs found"

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Timber-windows
          path: dist/

  # === Tag and Release Job ===
  tag-and-release:
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Git user
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: Timber-linux
          path: release-assets/

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: Timber-windows
          path: release-assets/

      # === Generate next tag based on SFML version ===
      - name: Generate and push tag
        id: tag
        run: |
          VERSION="${{ needs.build-linux.outputs.sfml_version }}"
          PREFIX="Timber_SFML-${VERSION}_"
          LATEST=$(git tag --list "${PREFIX}*" | sort -V | tail -n 1)
          if [[ -z "$LATEST" ]]; then
            NEXT="0001"
          else
            NUM=$(echo "$LATEST" | sed -E "s/^${PREFIX}//")
            NEXT=$(printf "%04d" $((10#$NUM + 1)))
          fi
          NEW_TAG="${PREFIX}${NEXT}"
          echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT
          git tag "$NEW_TAG"
          git push origin "$NEW_TAG"

      # === Create GitHub Release with binaries ===
      
      - name: Prepare release folders
        run: |
          mkdir -p release/Timber-linux
          mkdir -p release/Timber-windows

          # Copy Linux binary
          cp release-assets/Timber release/Timber-linux/

          # Copy Windows binary and DLLs
          cp release-assets/Timber.exe release/Timber-windows/ || echo "No EXE found"
          cp release-assets/*.dll release/Timber-windows/ || echo "No DLLs found"

          # Copy fonts to both
          cp -r fonts release/Timber-linux/
          cp -r fonts release/Timber-windows/
           # Copy graphics to both
          cp -r graphics release/Timber-linux/ || echo "No graphics folder"
          cp -r graphics release/Timber-windows/ || echo "No graphics folder"

          # Copy sounds to both
          cp -r sounds release/Timber-linux/ || echo "No sounds folder"
          cp -r sounds release/Timber-windows/ || echo "No sounds folder"

          # Copy levels to both
          cp -r levels release/Timber-linux/ || echo "No levels folder"
          cp -r levels release/Timber-windows/ || echo "No levels folder"

      - name: Create zip archives
        run: |
          TAG=${{ steps.tag.outputs.tag }}
          cd release
          zip -r "${TAG}-linux.zip" Timber-linux
          zip -r "${TAG}-windows.zip" Timber-windows

      - name: Upload zipped release assets
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.tag.outputs.tag }}
          tag_name: ${{ steps.tag.outputs.tag }}
          files: |
            release/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
